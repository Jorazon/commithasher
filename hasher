#!/bin/bash

TARGET="000" # The target pattern (3 leading zeros)
# Retrieve the original message, timestamps and tree object from the HEAD commit
MESSAGE=$(git log -1 --pretty=format:"%s")
AUTHOR_DATE=$(git log -1 --format=%aI)
COMMITTER_DATE=$(git log -1 --format=%cI)
TREE=$(git write-tree)

# ASCII characters set: 0-9, A-F
CHARS=({0..9} {A..F})

# Function to generate random trailing data
function generate_trailing_data() {
  TRAILING=""
  for i in {1..6}; do  # Length of trailing data, adjust as needed
    TRAILING+="${CHARS[RANDOM % ${#CHARS[@]}]}"
  done
  echo "$TRAILING"
}

function status_spinner() {
  # Setup for braille status indicator
  braille_chars=("⠇" "⠋" "⠙" "⠸" "⠴" "⠦")
  fps=15
  delay=$(echo "scale=6; 1.0 / $fps.0" | bc)
  i=0
  # Update status indicator
  while true; do
    echo -ne "${braille_chars[$((i % ${#braille_chars[@]}))]}\r"
    ((i++))
    sleep $delay
  done
}

echo -ne "  Finding a cool hash\r"

# Run spinner indicator in parallel and store it's PID
status_spinner &
PID1=$!

while true; do
  # Generate trailing characters
  TRAILING_DATA=$(generate_trailing_data)

  # New commit message
  NEW_MESSAGE="$MESSAGE #$TRAILING_DATA"

  # Create a new commit with `git commit-tree`
  HASH=$(GIT_AUTHOR_DATE="$AUTHOR_DATE" GIT_COMMITTER_DATE="$COMMITTER_DATE" \
    git commit-tree "$TREE" -p HEAD~1 -m "$NEW_MESSAGE")

  # Check if the hash matches the required pattern
  if [[ "$HASH" == $TARGET* ]]; then
    # Kill spinner indicator
    kill $PID1

    # Replace previous HEAD with new commit
    git reset --soft "$HASH"

    # Print info
    echo "Found matching hash: $HASH"
    echo "Amending commit with #$TRAILING_DATA"
    break
  fi
done
